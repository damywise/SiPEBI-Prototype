<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SipebiPrototype">
  <Style TargetType="{x:Type TextBlock}" x:Key="HeaderText" BasedOn="{StaticResource BaseTextBlockStyle}">
    <Setter Property="Foreground" Value="{StaticResource ForegroundMainBrush}"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="Margin" Value="0 6"/>
  </Style>

  <Style TargetType="{x:Type TextBlock}" x:Key="AnalysisText" BasedOn="{StaticResource BaseTextBlockStyle}">
    <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
    <Setter Property="FontFamily" Value="{StaticResource LatoRegular}"/>
    <Setter Property="Padding" Value="5 1 5 2"/>
    <Setter Property="FontSize" Value="{StaticResource FontSizeSlightlyLarge}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Foreground" Value="{Binding IsHeader, Converter={local:BooleanToColorConverter}, 
                                        ConverterParameter={StaticResource ForegroundLightBrush}}"/>
  </Style>

  <!-- Default TextBox style-->
  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}"/>
    <Setter Property="FontFamily" Value="{StaticResource LatoRegular}"/>
    <Setter Property="Padding" Value="10"/>
    <Setter Property="Margin" Value="0 5 0 5"/>
    <Setter Property="BorderBrush" Value="{StaticResource WordBlueBrush}"/>
    <Setter Property="BorderThickness" Value="0 0 0 1"/>

    <Setter Property="Background" Value="{StaticResource BackgroundFullLightBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"/>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">

          <Grid>
            <Border x:Name="border" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}" 
                    SnapsToDevicePixels="True">
              <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
            </Border>
            <!-- IsHitTestVisible="False" means not clickable-->
            <TextBlock IsHitTestVisible="False"
                       Text="{TemplateBinding Tag}"
                       x:Name="placeholder"
                       FontFamily="{StaticResource LatoThin}"
                       Padding="{TemplateBinding Padding}"
                       VerticalAlignment="Center"
                       HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                       Foreground="{StaticResource ForegroundVeryDarkBrush}">
              <TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>
                    <!-- This is basically to tell that when the text value is empty (Therefore Value = ""), then set the Visibility of the TextBlock to Visible-->
                    <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="">
                      <Setter Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>
            </TextBlock>
          </Grid>


          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Default Normal TextBox style-->
  <Style x:Key="NormalTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="BorderThickness" Value="0 0 0 0"/>
  </Style>

  <!-- Common style for TextBox used in the working page-->
  <Style x:Key="WorkTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource NormalTextBox}">
    <Setter Property="TextAlignment" Value="Justify"/>
    <Setter Property="Padding" Value="8 0 20 0"/>
    <Setter Property="FontFamily" Value="{StaticResource LatoRegular}"/>
    <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}"/>
    <Setter Property="TextWrapping" Value="Wrap"/>
    <Setter Property="AcceptsReturn" Value="True"/>
  </Style>

  <!-- Default PasswordBox style-->
  <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}"/>
    <Setter Property="FontFamily" Value="{StaticResource LatoRegular}"/>
    <Setter Property="Padding" Value="10"/>
    <Setter Property="Margin" Value="0 5 0 5"/>
    <Setter Property="BorderBrush" Value="{StaticResource WordBlueBrush}"/>
    <Setter Property="BorderThickness" Value="0 0 0 1"/>
    <Setter Property="local:MonitorPasswordProperty.Value" Value="True"/> <!-- This is the attachment of the property, then the callback event will be fired!-->

    <Setter Property="Background" Value="{StaticResource BackgroundFullLightBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}"/>
    
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">

          <Grid>
            <Border x:Name="border" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}" 
                    SnapsToDevicePixels="True">
              <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
            </Border>
            <!-- IsHitTestVisible="False" means not clickable-->
            <!-- Note: Visibility="{TemplateBinding local:HasTextProperty.Value, Converter={local:AttachedPropertyValueConverter}}"-->
            <!-- is added because the previous (see below) TextBlock.Style with generic class DataTrigger binding cannot be rendered correctly in the preview-->
            <!-- It is actually OK in the runtime. It's just annoying to see during the design time-->
            <TextBlock IsHitTestVisible="False"
                       Text="{TemplateBinding Tag}"
                       x:Name="placeholder"
                       FontFamily="{StaticResource LatoThin}"
                       FontSize="{TemplateBinding FontSize}"
                       Padding="{TemplateBinding Padding}"
                       Visibility="{TemplateBinding local:HasTextProperty.Value, Converter={local:BooleanToVisibilityConverter}}"
                       VerticalAlignment="Center"
                       HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                       Foreground="{StaticResource ForegroundVeryDarkBrush}"
                       >
              
              <!--<TextBlock.Style>
                <Style TargetType="{x:Type TextBlock}">
                  <Setter Property="Visibility" Value="Collapsed"/>
                  <Style.Triggers>-->
                    <!-- Here, instead of attach it to the Text, it attaches to the HasText property, checking if the Value is "False" to show the visibility-->
                    <!-- Now, the WPF way to tell that the binding is an attached property is by putting parentheses around the attached property reference-->
                    <!--<DataTrigger Binding="{Binding (local:PasswordBoxProperties.HasText), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                      <Setter Property="Visibility" Value="Visible"/>
                    </DataTrigger>-->
                    <!-- The DataTrigger binding here in WPF does not support generic class for preview rendering, so error message will be shown in the preview but OK in the actual runtime-->
                    <!--<DataTrigger Binding="{Binding (local:HasTextProperty.Value), RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                      <Setter Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </TextBlock.Style>-->
            </TextBlock>
          </Grid>


          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
              <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type TextBlock}" x:Key="SpinningText" BasedOn="{StaticResource BaseTextBlockStyle}">
    <Setter Property="FontFamily" Value="{StaticResource FontAwesome}"/>
    <Setter Property="Text" Value="&#xf110;"/>
    <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
    <Setter Property="RenderTransform">
      <Setter.Value>
        <RotateTransform/>
      </Setter.Value>
    </Setter>
    
    <Style.Resources>
      <Storyboard x:Key="Spin">
        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                         From="0"
                         To="360"
                         Duration="0:0:2"
                         RepeatBehavior="Forever"/>
      </Storyboard>
    </Style.Resources>
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=IsVisible}" Value="True">
        <DataTrigger.EnterActions>
          <BeginStoryboard Name="SpinStoryboard" Storyboard="{StaticResource Spin}"/>
        </DataTrigger.EnterActions>
        <DataTrigger.ExitActions>
          <RemoveStoryboard BeginStoryboardName="SpinStoryboard"/>
        </DataTrigger.ExitActions>
      </DataTrigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>