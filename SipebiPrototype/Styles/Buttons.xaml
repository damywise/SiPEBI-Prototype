<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:SipebiPrototype">
  <ResourceDictionary.MergedDictionaries>
    <!-- Order is important-->
    <ResourceDictionary Source="Colors.xaml"/>
    <ResourceDictionary Source="Fonts.xaml"/>
    <ResourceDictionary Source="Texts.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  
  <!-- Hoverless, to remove the hover effect of the button-->
  <!-- Hoverless button-->
  <Style TargetType="{x:Type Button}" x:Key="Hoverless">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <!-- We use Border instead of grid because we need padding-->
          <!-- We need padding because the actual click command that can be done to the button is going to be larger than the icon size-->
          <!-- The part which is a box but not the icon where we can perform click command is added by the padding-->
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
            <!-- By default to make the icon (button) is in the centre-->
            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- System Icon Button-->
  <Style TargetType="{x:Type Button}" x:Key="SystemIconButton" BasedOn="{StaticResource Hoverless}">
    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
    <Setter Property="Padding" Value="5"/>
  </Style>
  
  <!-- Window Control Button-->
  <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Padding" Value="8"/>
    <Setter Property="Foreground" Value="{StaticResource ForegroundMainBrush}" />
    <Setter Property="LayoutTransform">
      <Setter.Value>
        <!-- This is to strecth so that the width of the button will be streched more. Otherwise, the button look too thin and tall rather than round and well-->
        <ScaleTransform ScaleX="1.5"/>
      </Setter.Value>
    </Setter>
    
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <!-- To set up change of style due to some "triggers"/actions in the UI-->
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{StaticResource BackgroundLightBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- Window Close Button-->
  <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="Red"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- Invisible Menu Button -->
  <Style x:Key="InvisibleMenuButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="BorderThickness" Value="0"/>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" 
                  BorderBrush="Transparent" 
                  BorderThickness="0 0 0 0" 
                  Background="{TemplateBinding Background}" 
                  SnapsToDevicePixels="True">
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Can Busy Base Button -->
  <Style x:Key="CanBusyBaseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="Background" Value="{StaticResource WordOrangeBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
    <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />

    <!-- This is the attachment of the property, then the callback event will be fired!-->
    <Setter Property="local:IsBusyProperty.Value" Value="False"/>
  </Style>
  
  <!-- Regular Button -->
  <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CanBusyBaseButton}">
    <Setter Property="Padding" Value="50 10" />
    <Setter Property="Margin" Value="0 10" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" 
                  CornerRadius="10"
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  BorderThickness="{TemplateBinding BorderThickness}" 
                  Background="{TemplateBinding Background}" 
                  SnapsToDevicePixels="True">
            <!-- Template binding FontFamily is important here so that it will use the font family we want (with the correct style too)-->
            <Grid>
              <TextBlock Text="{TemplateBinding Content}" 
                       Focusable="False" 
                       Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}}"
                       FontFamily="{TemplateBinding FontFamily}"
                       FontSize="{TemplateBinding FontSize}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       Margin="{TemplateBinding Padding}" 
                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <TextBlock
                Style="{StaticResource SpinningText}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                FontSize="{TemplateBinding FontSize}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}">
              </TextBlock>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation To="{StaticResource WordBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation From="{StaticResource WordBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <!--<Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" TargetName="border" Value="{StaticResource BackgroundBlueBrush}"/>
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>
  
  <!-- Adjustable Button -->
  <Style x:Key="AdjustableButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CanBusyBaseButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" 
                  CornerRadius="{TemplateBinding local:CornerRadiusProperty.Value, Converter={local:StringToCornerRadiusConverter}}"
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  BorderThickness="{TemplateBinding BorderThickness}" 
                  Background="{TemplateBinding Background}"                   
                  SnapsToDevicePixels="True">
            <!-- Template binding FontFamily is important here so that it will use the font family we want (with the correct style too)-->
            <Grid>
              <TextBlock Text="{TemplateBinding Content}" 
                       Focusable="False" 
                       Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}}"
                       FontFamily="{TemplateBinding FontFamily}"
                       FontSize="{TemplateBinding FontSize}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       Margin="{TemplateBinding Padding}" 
                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <TextBlock
                Style="{StaticResource SpinningText}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                FontSize="{TemplateBinding FontSize}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}">
              </TextBlock>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <!--<ColorAnimation To="{TemplateBinding local:ChangedColorProperty.Value, Converter={local:StringRGBToColorConverter}}" 
                                  Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>-->
                  <ColorAnimation To="{StaticResource WordDeeperGreen}" 
                                  Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <!--<ColorAnimation From="{TemplateBinding local:ChangedColorProperty.Value, Converter={local:StringRGBToColorConverter}}" 
                                  Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>-->
                  <ColorAnimation From="{StaticResource WordDeeperGreen}" 
                                  Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- TransparentAdjustable Button -->
  <Style x:Key="TransparentAdjustableButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CanBusyBaseButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Grid>
            <Border x:Name="mask" 
                    Panel.ZIndex="1"
                    CornerRadius="{TemplateBinding local:CornerRadiusProperty.Value, Converter={local:StringToCornerRadiusConverter}}"
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="Transparent"
                    SnapsToDevicePixels="True">
            </Border>
            <Border x:Name="border" 
                    CornerRadius="{TemplateBinding local:CornerRadiusProperty.Value, Converter={local:StringToCornerRadiusConverter}}"
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}"                   
                    SnapsToDevicePixels="True">
              <!-- Template binding FontFamily is important here so that it will use the font family we want (with the correct style too)-->
              <Grid>
                <TextBlock Text="{TemplateBinding Content}" 
                       Focusable="False" 
                       Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}}"
                       FontFamily="{TemplateBinding FontFamily}"
                       FontSize="{TemplateBinding FontSize}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       Margin="{TemplateBinding Padding}" 
                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                <TextBlock
                Style="{StaticResource SpinningText}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                FontSize="{TemplateBinding FontSize}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Visibility="{TemplateBinding local:IsBusyProperty.Value, Converter={local:BooleanToVisibilityConverter}, ConverterParameter=True}">
                </TextBlock>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation To="{StaticResource ColorThreeSixteenthTransparentWhite}" 
                                  Duration="0:0:0.3" Storyboard.TargetName="mask" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation From="{StaticResource ColorThreeSixteenthTransparentWhite}" 
                                  Duration="0:0:0.3" Storyboard.TargetName="mask" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Item Action Button -->
  <Style x:Key="ItemActionButton" TargetType="{x:Type Button}" BasedOn="{StaticResource TransparentAdjustableButton}">
    <Setter Property="Margin" Value="5 0 0 0"/>
    <Setter Property="Padding" Value="0 2 0 2"/>
    <Setter Property="Width" Value="25"/>
    <Setter Property="FontFamily" Value="{StaticResource FontAwesome}"/>
    <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}"/>
    <Setter Property="local:CornerRadiusProperty.Value" Value="5"/>
  </Style>

  <!-- Text Button -->
  <Style x:Key="TextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
    <Setter Property="FontFamily" Value="{StaticResource LatoRegular}" />
    <Setter Property="Padding" Value="30 10" />
    <Setter Property="Margin" Value="0 10" />

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" 
                  CornerRadius="10"
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  BorderThickness="{TemplateBinding BorderThickness}" 
                  Background="{TemplateBinding Background}" 
                  SnapsToDevicePixels="True">
            <!-- Template binding FontFamily is important here so that it will use the font family we want (with the correct style too)-->
            <TextBlock Text="{TemplateBinding Content}" 
                       Focusable="False" 
                       FontFamily="{TemplateBinding FontFamily}"
                       FontSize="{TemplateBinding FontSize}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       Margin="{TemplateBinding Padding}" 
                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Foreground" Value="{StaticResource WordOrangeBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" TargetName="border" Value="{StaticResource BackgroundDarkBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>

  <!-- Icon Button -->
  <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="Background" Value="{StaticResource WordTransparentBlueBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
    <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
    <Setter Property="Padding" Value="30" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" 
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  BorderThickness="{TemplateBinding BorderThickness}" 
                  Background="{TemplateBinding Background}" 
                  SnapsToDevicePixels="True">
            <!-- Template binding FontFamily is important here so that it will use the font family we want (with the correct style too)-->
            <Grid>
              <!-- Viewbox to scale the buttons well-->
              <Viewbox>
                <TextBlock Text="{TemplateBinding Content}" 
                       Focusable="False" 
                       FontFamily="{TemplateBinding FontFamily}"
                       FontSize="{TemplateBinding FontSize}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       Margin="{TemplateBinding Padding}" 
                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </Viewbox>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation To="{StaticResource WordBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <ColorAnimation To="{StaticResource WordTransparentBlue}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <!--<Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" TargetName="border" Value="{StaticResource BackgroundBlueBrush}"/>
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>

  <!-- Icon Grow Button -->
  <Style x:Key="IconGrowButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">
    <Setter Property="Background" Value="{StaticResource WordTransparentBlueBrush}"/>
    <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="FontSize" Value="{StaticResource FontSizeXXLarge}" />
    <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
    <Setter Property="Padding" Value="30" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"/>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ButtonBase}">
          <Border x:Name="border" 
                  BorderBrush="{TemplateBinding BorderBrush}" 
                  BorderThickness="{TemplateBinding BorderThickness}" 
                  Background="{TemplateBinding Background}" 
                  SnapsToDevicePixels="True">

            <!-- Add a render scale transform -->
            <Border.RenderTransform>
              <ScaleTransform />
            </Border.RenderTransform>
            <Border.RenderTransformOrigin>
              <Point X="0.5" Y="0.5"/>
            </Border.RenderTransformOrigin>

            <!-- Template binding FontFamily is important here so that it will use the font family we want (with the correct style too)-->
            <Grid>
              <Viewbox>
                <TextBlock Text="{TemplateBinding Content}" 
                       Focusable="False" 
                       FontFamily="{TemplateBinding FontFamily}"
                       FontSize="{TemplateBinding FontSize}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                       Margin="{TemplateBinding Padding}" 
                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </Viewbox>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"/>
                  <DoubleAnimation To="1.4" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
              <BeginStoryboard>
                <Storyboard>
                  <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"/>
                  <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="border" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"/>
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
            <!--<Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" TargetName="border" Value="{StaticResource BackgroundBlueBrush}"/>
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>
  
</ResourceDictionary>